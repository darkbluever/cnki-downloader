!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Article	main.go	/^type Article struct {$/;"	t
ArticleInfo	main.go	/^type ArticleInfo struct {$/;"	t
ArticlePropertyEntry	main.go	/^type ArticlePropertyEntry struct {$/;"	t
Auth	main.go	/^func (c *CNKIDownloader) Auth() error {$/;"	f
CNKIArticleInfo	main.go	/^type CNKIArticleInfo struct {$/;"	t
CNKIDownloader	main.go	/^type CNKIDownloader struct {$/;"	t
CNKISearchResult	main.go	/^type CNKISearchResult struct {$/;"	t
CurrentPage	main.go	/^func (c *CNKIDownloader) CurrentPage() (*CNKISearchResult, error) {$/;"	f
Download	main.go	/^func (c *CNKIDownloader) Download(paper *Article) (string, error) {$/;"	f
FixedDownloadViewUrl	main.go	/^	FixedDownloadViewUrl = "https:\/\/github.com\/amyhaber\/cnki-downloader#download"$/;"	c
GOARCH	build.bat	/^set GOARCH=386$/;"	v
GOOS	build.bat	/^set GOOS=darwin$/;"	v
GOOS	build.bat	/^set GOOS=linux$/;"	v
GOOS	build.bat	/^set GOOS=windows$/;"	v
GetPageData	main.go	/^func (ctx *CNKISearchResult) GetPageData() (entires []Article) {$/;"	f
GetPageInfo	main.go	/^func (ctx *CNKISearchResult) GetPageInfo() (size int, index int, count int) {$/;"	f
GetRecordInfo	main.go	/^func (ctx *CNKISearchResult) GetRecordInfo() (count int) {$/;"	f
MajorVersion	main.go	/^	MajorVersion         = 0$/;"	c
MaxDownloadThread	main.go	/^	MaxDownloadThread    = 4$/;"	c
MinorVersion	main.go	/^	MinorVersion         = 6$/;"	c
OrderByDownloadedTime	main.go	/^	OrderByDownloadedTime = int8(1 + iota)$/;"	c
OrderByPublishTime	main.go	/^	OrderByPublishTime$/;"	c
OrderByRefCount	main.go	/^	OrderByRefCount$/;"	c
OrderBySubject	main.go	/^	OrderBySubject$/;"	c
Search	main.go	/^func (c *CNKIDownloader) Search(keyword string, option *searchOption, page int) (*CNKISearchResult, error) {$/;"	f
SearchAllDoc	main.go	/^	SearchAllDoc = int8(1 + iota)$/;"	c
SearchByAbstract	main.go	/^	SearchByAbstract$/;"	c
SearchByAuthor	main.go	/^	SearchByAuthor$/;"	c
SearchByKeyword	main.go	/^	SearchByKeyword$/;"	c
SearchBySubject	main.go	/^	SearchBySubject = int8(1 + iota)$/;"	c
SearchConference	main.go	/^	SearchConference$/;"	c
SearchDoctorPaper	main.go	/^	SearchDoctorPaper$/;"	c
SearchFirst	main.go	/^func (c *CNKIDownloader) SearchFirst(keyword string, option *searchOption) (*CNKISearchResult, error) {$/;"	f
SearchJournal	main.go	/^	SearchJournal$/;"	c
SearchMasterPaper	main.go	/^	SearchMasterPaper$/;"	c
SearchNext	main.go	/^func (c *CNKIDownloader) SearchNext(pageNum int) (*CNKISearchResult, error) {$/;"	f
SearchPrev	main.go	/^func (c *CNKIDownloader) SearchPrev(pageNum int) (*CNKISearchResult, error) {$/;"	f
SearchStop	main.go	/^func (c *CNKIDownloader) SearchStop() {$/;"	f
VersionCheckUrl	main.go	/^	VersionCheckUrl      = "https:\/\/raw.githubusercontent.com\/amyhaber\/cnki-downloader\/master\/last-release.json"$/;"	c
VersionString	main.go	/^	VersionString        = "0.6-alpha"$/;"	c
analyze	main.go	/^func (a *Article) analyze() {$/;"	f
appUpdateInfo	main.go	/^type appUpdateInfo struct {$/;"	t
cnkiSearchCache	main.go	/^type cnkiSearchCache struct {$/;"	t
gbk2utf8	main.go	/^func gbk2utf8(charset string, r io.Reader) (io.Reader, error) {$/;"	f
getFile	main.go	/^func (c *CNKIDownloader) getFile(url string, filename string, filesize int) error {$/;"	f
getInfo	main.go	/^func (c *CNKIDownloader) getInfo(url string) (*CNKIArticleInfo, error) {$/;"	f
getInfoURL	main.go	/^func (c *CNKIDownloader) getInfoURL(instance string) (string, error) {$/;"	f
getInputString	main.go	/^func getInputString() string {$/;"	f
getSearchOpt	main.go	/^func getSearchOpt() *searchOption {$/;"	f
getUpdateInfo	main.go	/^func getUpdateInfo() (*appUpdateInfo, error) {$/;"	f
isPDFDocument	main.go	/^func isPDFDocument(fileName string) bool {$/;"	f
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
printArticles	main.go	/^func printArticles(page int, articles []Article) {$/;"	f
searchFilterDefs	main.go	/^	searchFilterDefs map[int8]string = map[int8]string{$/;"	v
searchFilterHints	main.go	/^	searchFilterHints map[int8]string = map[int8]string{$/;"	v
searchOption	main.go	/^type searchOption struct {$/;"	t
searchOrderDefs	main.go	/^	searchOrderDefs map[int8]string = map[int8]string{$/;"	v
searchOrderHints	main.go	/^	searchOrderHints map[int8]string = map[int8]string{$/;"	v
searchRangeDefs	main.go	/^	searchRangeDefs map[int8]string = map[int8]string{$/;"	v
searchRangeHints	main.go	/^	searchRangeHints map[int8]string = map[int8]string{$/;"	v
update	main.go	/^func update() (allowContinue bool) {$/;"	f
